{
  "PageFactory Instance": {
    "prefix": "pfinst",
    "body": [
      "${TM_SELECTED_TEXT}const pageFactory = PageFactory.getInstance();"
    ],
    "description": "Create a constant with reference to PageFactory instance (with smart import detection)"
  },
  "PageFactory Instance with Import": {
    "prefix": "pfinstfull",
    "body": [
      "import { PageFactory } from '${1:./PageFactory}';",
      "",
      "const pageFactory = PageFactory.getInstance();"
    ],
    "description": "Create PageFactory instance with explicit import"
  },
  "PageFactory Property": {
    "prefix": "pfprop",
    "body": [
      "const ${1:propertyName} = PageFactory.getInstance().${2:pomProperty};"
    ],
    "description": "Create a constant with reference to POM singleton instance from PageFactory"
  },
  "PageFactory Import": {
    "prefix": "pfimport",
    "body": ["import { PageFactory } from '${1:./PageFactory}';"],
    "description": "Import PageFactory class"
  },
  "Page Object Model Class": {
    "prefix": "pomclass",
    "body": [
      "/**",
      " * ${1:PageName} - Page Object Model class",
      " */",
      "export class ${1:PageName} {",
      "    constructor() {",
      "        // Initialize page elements and actions",
      "    }",
      "",
      "    // Add page elements and methods here",
      "}"
    ],
    "description": "Create a basic Page Object Model class template"
  },
  "Smart PageFactory Usage": {
    "prefix": "pfuse",
    "body": [
      "// Get PageFactory instance",
      "const pageFactory = PageFactory.getInstance();",
      "",
      "// Access POM classes",
      "const ${1:pomInstance} = pageFactory.${2:pomProperty};",
      "",
      "// Use POM methods",
      "await ${1:pomInstance}.${3:methodName}();"
    ],
    "description": "Complete PageFactory usage pattern with POM access"
  }
}
